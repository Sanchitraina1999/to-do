{"version":3,"sources":["Todos.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","todos","deleteTodos","todoList","length","map","todo","className","key","id","onClick","content","class","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","onSubmit","this","type","onChange","Component","App","filter","newTodo","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wMAiBeA,EAfD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YAChBC,EAAWF,EAAMG,OACrBH,EAAMI,KAAI,SAACC,GACT,OACE,yBAAKC,UAAU,kBAAkBC,IAAKF,EAAKG,IACzC,0BAAMC,QAAS,kBAAMR,EAAYI,EAAKG,MAAMH,EAAKK,aAKvD,uBAAGJ,UAAU,gBAAb,wBAEF,OAAO,yBAAKK,MAAM,oBAAoBT,ICqBzBU,E,4MAhCbC,MAAQ,CACNH,QAAS,I,EAEXI,aAAe,SAACC,GACd,EAAKC,SAAS,CACZN,QAASK,EAAEE,OAAOC,S,EAGtBC,aAAe,SAACJ,GACdA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACZN,QAAS,M,uDAIX,OACE,yBAAKJ,UAAU,mBACb,0BAAMiB,SAAUC,KAAKL,cACnB,iEAEA,2BACEM,KAAK,OACLC,SAAUF,KAAKV,aACfI,MAAOM,KAAKX,MAAMH,gB,GAzBRiB,aCiCPC,E,4MA9Bbf,MAAQ,CACNb,MAAO,I,EAETC,YAAc,SAACO,GACb,IAAMR,EAAQ,EAAKa,MAAMb,MAAM6B,QAAO,SAACxB,GACrC,OAAOA,EAAKG,KAAOA,KAErB,EAAKQ,SAAS,CACZhB,W,EAGJsB,QAAU,SAACQ,GACTA,EAAQtB,GAAKuB,KAAKC,SAClB,IAAIhC,EAAK,sBAAO,EAAKa,MAAMb,OAAlB,CAAyB8B,IAClC,EAAKd,SAAS,CACZhB,W,uDAIF,OACE,yBAAKM,UAAU,iBACb,wBAAIA,UAAU,oBAAd,UACA,kBAAC,EAAD,CAASgB,QAASE,KAAKF,UACvB,2BAAOhB,UAAU,QAAjB,+BACA,kBAAC,EAAD,CAAON,MAAOwB,KAAKX,MAAMb,MAAOC,YAAauB,KAAKvB,mB,GAzBxC0B,aCQEM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6de3c980.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Todos = ({ todos, deleteTodos }) => {\n  const todoList = todos.length ? (\n    todos.map((todo) => {\n      return (\n        <div className=\"collection-item\" key={todo.id}>\n          <span onClick={() => deleteTodos(todo.id)}>{todo.content}</span>\n        </div>\n      );\n    })\n  ) : (\n    <p className=\"center mt-10\">You have no todo's !</p>\n  );\n  return <div class=\"todos collection\">{todoList}</div>;\n};\n\nexport default Todos;\n","import React, { Component } from \"react\";\n\nclass AddTodo extends Component {\n  state = {\n    content: \"\",\n  };\n  handleChange = (e) => {\n    this.setState({\n      content: e.target.value,\n    });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.addTodo(this.state);\n    this.setState({\n      content: \"\",\n    });\n  };\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <form onSubmit={this.handleSubmit}>\n          <label>Add new todo, Enter to submit:</label>\n\n          <input\n            type=\"text\"\n            onChange={this.handleChange}\n            value={this.state.content}\n          ></input>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AddTodo;\n","import React, { Component } from \"react\";\nimport Todos from \"./Todos\";\nimport AddTodo from \"./AddTodo\";\n\nclass App extends Component {\n  state = {\n    todos: [],\n  };\n  deleteTodos = (id) => {\n    const todos = this.state.todos.filter((todo) => {\n      return todo.id !== id;\n    });\n    this.setState({\n      todos,\n    });\n  };\n  addTodo = (newTodo) => {\n    newTodo.id = Math.random();\n    let todos = [...this.state.todos, newTodo];\n    this.setState({\n      todos\n    });\n  };\n  render() {\n    return (\n      <div className=\"App container\">\n        <h1 className=\"center pink-text\">Todo's</h1>\n        <AddTodo addTodo={this.addTodo} />\n        <label className=\"ml-3\">Click on any Todo to delete</label>\n        <Todos todos={this.state.todos} deleteTodos={this.deleteTodos} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}